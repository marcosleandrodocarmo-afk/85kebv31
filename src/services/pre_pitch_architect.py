#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Pre-Pitch Architect
Arquiteto do Pr√©-Pitch Invis√≠vel - Orquestra√ß√£o Psicol√≥gica
"""

import time
import random
import logging
import json
from typing import Dict, List, Any, Optional
from services.ai_manager import ai_manager
from services.auto_save_manager import salvar_etapa, salvar_erro

logger = logging.getLogger(__name__)

class PrePitchArchitect:
    """Arquiteto do Pr√©-Pitch Invis√≠vel - Orquestra√ß√£o Psicol√≥gica"""
    
    def __init__(self):
        """Inicializa o arquiteto de pr√©-pitch"""
        self.psychological_phases = self._load_psychological_phases()
        self.transition_templates = self._load_transition_templates()
        
        logger.info("Pre-Pitch Architect inicializado")
    
    def _load_psychological_phases(self) -> Dict[str, Dict[str, Any]]:
        """Carrega fases psicol√≥gicas da orquestra√ß√£o"""
        return {
            'quebra': {
                'objetivo': 'Destruir a ilus√£o confort√°vel',
                'duracao': '3-5 minutos',
                'intensidade': 'Alta',
                'drivers_ideais': ['Diagn√≥stico Brutal', 'Ferida Exposta'],
                'resultado_esperado': 'Desconforto produtivo'
            },
            'exposicao': {
                'objetivo': 'Revelar a ferida real',
                'duracao': '4-6 minutos',
                'intensidade': 'Crescente',
                'drivers_ideais': ['Custo Invis√≠vel', 'Ambiente Vampiro'],
                'resultado_esperado': 'Consci√™ncia da dor'
            },
            'indignacao': {
                'objetivo': 'Criar revolta produtiva',
                'duracao': '3-4 minutos',
                'intensidade': 'M√°xima',
                'drivers_ideais': ['Rel√≥gio Psicol√≥gico', 'Inveja Produtiva'],
                'resultado_esperado': 'Urg√™ncia de mudan√ßa'
            },
            'vislumbre': {
                'objetivo': 'Mostrar o poss√≠vel',
                'duracao': '5-7 minutos',
                'intensidade': 'Esperan√ßosa',
                'drivers_ideais': ['Ambi√ß√£o Expandida', 'Trof√©u Secreto'],
                'resultado_esperado': 'Desejo amplificado'
            },
            'tensao': {
                'objetivo': 'Amplificar o gap',
                'duracao': '2-3 minutos',
                'intensidade': 'Crescente',
                'drivers_ideais': ['Identidade Aprisionada', 'Oportunidade Oculta'],
                'resultado_esperado': 'Tens√£o m√°xima'
            },
            'necessidade': {
                'objetivo': 'Tornar a mudan√ßa inevit√°vel',
                'duracao': '3-4 minutos',
                'intensidade': 'Definitiva',
                'drivers_ideais': ['M√©todo vs Sorte', 'Mentor Salvador'],
                'resultado_esperado': 'Necessidade de solu√ß√£o'
            }
        }
    
    def _load_transition_templates(self) -> Dict[str, str]:
        """Carrega templates de transi√ß√£o"""
        return {
            'quebra_para_exposicao': "Eu sei que isso d√≥i ouvir... Mas sabe o que d√≥i mais?",
            'exposicao_para_indignacao': "E o pior de tudo √© que isso n√£o precisa ser assim...",
            'indignacao_para_vislumbre': "Mas calma, n√£o vim aqui s√≥ para abrir feridas...",
            'vislumbre_para_tensao': "Agora voc√™ v√™ a diferen√ßa entre onde est√° e onde poderia estar...",
            'tensao_para_necessidade': "A pergunta n√£o √© SE voc√™ vai mudar, √© COMO...",
            'necessidade_para_logica': "Eu sei que voc√™ est√° sentindo isso agora... Mas seu c√©rebro racional est√° gritando: 'Ser√° que funciona mesmo?' Ent√£o deixa eu te mostrar os n√∫meros..."
        }
    
    def generate_complete_pre_pitch_system(
        self, 
        drivers_list: List[Dict[str, Any]], 
        avatar_analysis: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Gera sistema completo de pr√©-pitch invis√≠vel"""
        
        # Valida√ß√£o cr√≠tica de entrada
        if not drivers_list:
            logger.error("‚ùå Lista de drivers vazia")
            raise ValueError("PR√â-PITCH FALHOU: Nenhum driver mental fornecido")
        
        if not avatar_analysis:
            logger.error("‚ùå An√°lise do avatar ausente")
            raise ValueError("PR√â-PITCH FALHOU: An√°lise do avatar ausente")
        
        if not context_data.get('segmento'):
            logger.error("‚ùå Segmento n√£o informado")
            raise ValueError("PR√â-PITCH FALHOU: Segmento obrigat√≥rio")
        
        try:
            logger.info(f"üéØ Gerando pr√©-pitch invis√≠vel com {len(drivers_list)} drivers")
            
            # Salva dados de entrada imediatamente
            salvar_etapa("pre_pitch_entrada", {
                "drivers_list": drivers_list,
                "avatar_analysis": avatar_analysis,
                "context_data": context_data
            }, categoria="pre_pitch")
            
            # Seleciona drivers √≥timos para pr√©-pitch
            selected_drivers = self._select_optimal_drivers(drivers_list)
            
            if not selected_drivers:
                logger.error("‚ùå Nenhum driver adequado selecionado")
                # Usa drivers b√°sicos em vez de falhar
                logger.warning("üîÑ Usando drivers b√°sicos para pr√©-pitch")
                selected_drivers = self._get_basic_drivers(context_data)
            
            # Salva drivers selecionados
            salvar_etapa("drivers_selecionados", selected_drivers, categoria="pre_pitch")
            
            # Cria orquestra√ß√£o emocional
            emotional_orchestration = self._create_emotional_orchestration(selected_drivers, avatar_analysis)
            
            if not emotional_orchestration or not emotional_orchestration.get('sequencia_psicologica'):
                logger.error("‚ùå Falha na orquestra√ß√£o emocional")
                # Usa orquestra√ß√£o b√°sica em vez de falhar
                logger.warning("üîÑ Usando orquestra√ß√£o emocional b√°sica")
                emotional_orchestration = self._create_basic_orchestration(context_data)
            
            # Salva orquestra√ß√£o
            salvar_etapa("orquestracao_emocional", emotional_orchestration, categoria="pre_pitch")
            
            # Gera roteiro completo
            complete_script = self._generate_complete_script(emotional_orchestration, context_data)
            
            # Valida roteiro gerado
            if not self._validate_script(complete_script, context_data):
                logger.error("‚ùå Roteiro gerado √© inv√°lido")
                # Usa roteiro b√°sico em vez de falhar
                logger.warning("üîÑ Usando roteiro b√°sico")
                complete_script = self._create_basic_script(context_data)
            
            # Salva roteiro
            salvar_etapa("roteiro_completo", complete_script, categoria="pre_pitch")
            
            # Cria varia√ß√µes por formato
            format_variations = self._create_format_variations(complete_script, context_data)
            
            # Gera m√©tricas de sucesso
            success_metrics = self._create_success_metrics()
            
            result = {
                'orquestracao_emocional': emotional_orchestration,
                'roteiro_completo': complete_script,
                'variacoes_formato': format_variations,
                'metricas_sucesso': success_metrics,
                'drivers_utilizados': [driver['nome'] for driver in selected_drivers],
                'duracao_total': self._calculate_total_duration(emotional_orchestration),
                'intensidade_maxima': self._calculate_max_intensity(emotional_orchestration),
                'validation_status': 'VALID',
                'generation_timestamp': time.time()
            }
            
            # Salva resultado final imediatamente
            salvar_etapa("pre_pitch_final", result, categoria="pre_pitch")
            
            logger.info("‚úÖ Pr√©-pitch invis√≠vel gerado com sucesso")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar pr√©-pitch: {str(e)}")
            salvar_erro("pre_pitch_sistema", e, contexto={"segmento": context_data.get('segmento')})
            
            # Retorna sistema b√°sico em vez de falhar
            logger.warning("üîÑ Retornando pr√©-pitch b√°sico")
            return self._generate_fallback_pre_pitch_system(context_data)
    
    def _get_basic_drivers(self, context_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Retorna drivers b√°sicos como fallback"""
        
        return [
            {'nome': 'Diagn√≥stico Brutal'},
            {'nome': 'Rel√≥gio Psicol√≥gico'},
            {'nome': 'M√©todo vs Sorte'}
        ]
    
    def _create_basic_orchestration(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Cria orquestra√ß√£o b√°sica como fallback"""
        
        return {
            'sequencia_psicologica': [
                {
                    'fase': 'quebra',
                    'objetivo': 'Quebrar padr√£o e despertar consci√™ncia',
                    'duracao': '3-5 minutos',
                    'intensidade': 'Alta',
                    'drivers_utilizados': ['Diagn√≥stico Brutal'],
                    'resultado_esperado': 'Desconforto produtivo'
                },
                {
                    'fase': 'vislumbre',
                    'objetivo': 'Mostrar possibilidades',
                    'duracao': '5-7 minutos',
                    'intensidade': 'Esperan√ßosa',
                    'drivers_utilizados': ['M√©todo vs Sorte'],
                    'resultado_esperado': 'Desejo de mudan√ßa'
                },
                {
                    'fase': 'necessidade',
                    'objetivo': 'Criar urg√™ncia',
                    'duracao': '3-4 minutos',
                    'intensidade': 'Definitiva',
                    'drivers_utilizados': ['Rel√≥gio Psicol√≥gico'],
                    'resultado_esperado': 'Urg√™ncia de a√ß√£o'
                }
            ]
        }
    
    def _validate_script(self, script: Dict[str, Any], context_data: Dict[str, Any]) -> bool:
        """Valida se o roteiro gerado √© v√°lido"""
        if not script:
            return False
        
        required_sections = ['abertura', 'desenvolvimento', 'fechamento']
        
        for section in required_sections:
            if section not in script:
                logger.error(f"‚ùå Se√ß√£o obrigat√≥ria ausente no roteiro: {section}")
                return False
            
            section_data = script[section]
            if not section_data.get('script') or len(section_data['script']) < 50:
                logger.error(f"‚ùå Script da se√ß√£o '{section}' muito curto ou ausente")
                return False
            
            # Verifica se n√£o √© gen√©rico
            script_text = section_data['script'].lower()
            if 'customizado para' in script_text and len(script_text) < 100:
                logger.error(f"‚ùå Script gen√©rico na se√ß√£o '{section}'")
                return False
        
        return True
    
    def _select_optimal_drivers(self, drivers_list: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Seleciona drivers √≥timos para pr√©-pitch massivo"""
        
        # DRIVERS ESSENCIAIS POR FASE PSICOL√ìGICA
        phase_drivers = {
            'quebra': ['Diagn√≥stico Brutal', 'Ferida Exposta', 'Realidade Brutal'],
            'exposicao': ['Custo Invis√≠vel', 'Ambiente Vampiro', 'Sangria Invis√≠vel'],
            'indignacao': ['Rel√≥gio Psicol√≥gico', 'Inveja Produtiva', 'Urg√™ncia'],
            'vislumbre': ['Ambi√ß√£o Expandida', 'Trof√©u Secreto', 'Potencial'],
            'tensao': ['Identidade Aprisionada', 'Oportunidade Oculta', 'Gap'],
            'necessidade': ['M√©todo vs Sorte', 'Mentor Salvador', 'Sistema'],
            'decisao': ['Decis√£o Bin√°ria', 'Coragem Necess√°ria', 'Momento']
        }
        
        selected_by_phase = {}
        
        # Seleciona drivers por fase psicol√≥gica
        for phase, keywords in phase_drivers.items():
            phase_matches = []
            for driver in drivers_list:
                driver_name = driver.get('nome', '')
                if any(keyword.lower() in driver_name.lower() for keyword in keywords):
                    phase_matches.append(driver)
            
            # Pega os melhores drivers para esta fase
            if phase_matches:
                selected_by_phase[phase] = phase_matches[:2]  # M√°ximo 2 por fase
            
        # Garante drivers cr√≠ticos mesmo se n√£o foram categorizados
        critical_keywords = [
            'brutal', 'diagn√≥stico', 'realidade', 'custo', 'perda', 'urg√™ncia', 
            'tempo', 'ambi√ß√£o', 'potencial', 'm√©todo', 'sistema', 'decis√£o', 'bin√°ria'
        ]
        
        critical_drivers = []
        for driver in drivers_list:
            driver_name = driver.get('nome', '').lower()
            if any(keyword in driver_name for keyword in critical_keywords):
                critical_drivers.append(driver)
        
        # Combina tudo
        all_selected = []
        for phase_list in selected_by_phase.values():
            all_selected.extend(phase_list)
        
        # Adiciona cr√≠ticos n√£o inclu√≠dos
        for driver in critical_drivers[:5]:
            if driver not in all_selected:
                all_selected.append(driver)
        
        # Se ainda n√£o tem suficientes, pega os primeiros da lista
        if len(all_selected) < 8:
            for driver in drivers_list[:12]:
                if driver not in all_selected:
                    all_selected.append(driver)
                if len(all_selected) >= 10:
                    break
        
        # Remove duplicatas mantendo ordem
        seen_names = set()
        unique_selected = []
        for driver in all_selected:
            name = driver.get('nome', '')
            if name not in seen_names:
                seen_names.add(name)
                unique_selected.append(driver)
        
        return unique_selected[:10]  # M√°ximo 10 drivers para pr√©-pitch
    
    def _create_emotional_orchestration(
        self, 
        selected_drivers: List[Dict[str, Any]], 
        avatar_analysis: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Cria orquestra√ß√£o emocional"""
        
        # Mapeia drivers para fases psicol√≥gicas
        phase_mapping = self._map_drivers_to_phases(selected_drivers)
        
        # Cria sequ√™ncia psicol√≥gica
        psychological_sequence = []
        
        for phase_name, phase_data in self.psychological_phases.items():
            if phase_name in phase_mapping:
                phase_drivers = phase_mapping[phase_name]
                
                psychological_sequence.append({
                    'fase': phase_name,
                    'objetivo': phase_data['objetivo'],
                    'duracao': phase_data['duracao'],
                    'intensidade': phase_data['intensidade'],
                    'drivers_utilizados': [driver['nome'] for driver in phase_drivers],
                    'resultado_esperado': phase_data['resultado_esperado'],
                    'tecnicas': self._get_phase_techniques(phase_name, phase_drivers)
                })
        
        return {
            'sequencia_psicologica': psychological_sequence,
            'escalada_emocional': self._create_emotional_escalation(psychological_sequence),
            'pontos_criticos': self._identify_critical_points(psychological_sequence),
            'transicoes': self._create_phase_transitions(psychological_sequence)
        }
    
    def _map_drivers_to_phases(self, drivers: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
        """Mapeia drivers para fases psicol√≥gicas"""
        
        mapping = {}
        
        for driver in drivers:
            driver_name = driver.get('nome', '')
            
            # Mapeia baseado no tipo de driver
            if any(word in driver_name.lower() for word in ['diagn√≥stico', 'brutal', 'ferida']):
                mapping.setdefault('quebra', []).append(driver)
            elif any(word in driver_name.lower() for word in ['custo', 'ambiente', 'vampiro']):
                mapping.setdefault('exposicao', []).append(driver)
            elif any(word in driver_name.lower() for word in ['rel√≥gio', 'urg√™ncia', 'inveja']):
                mapping.setdefault('indignacao', []).append(driver)
            elif any(word in driver_name.lower() for word in ['ambi√ß√£o', 'trof√©u', 'expandida']):
                mapping.setdefault('vislumbre', []).append(driver)
            elif any(word in driver_name.lower() for word in ['identidade', 'oportunidade']):
                mapping.setdefault('tensao', []).append(driver)
            elif any(word in driver_name.lower() for word in ['m√©todo', 'mentor', 'salvador']):
                mapping.setdefault('necessidade', []).append(driver)
        
        return mapping
    
    def _get_phase_techniques(self, phase_name: str, phase_drivers: List[Dict[str, Any]]) -> List[str]:
        """Obt√©m t√©cnicas espec√≠ficas para cada fase"""
        
        techniques = {
            'quebra': ['Confronto direto', 'Pergunta desconfort√°vel', 'Estat√≠stica chocante'],
            'exposicao': ['C√°lculo de perdas', 'Visualiza√ß√£o da dor', 'Compara√ß√£o cruel'],
            'indignacao': ['Urg√™ncia temporal', 'Compara√ß√£o social', 'Consequ√™ncias futuras'],
            'vislumbre': ['Visualiza√ß√£o do sucesso', 'Casos de transforma√ß√£o', 'Possibilidades expandidas'],
            'tensao': ['Gap atual vs ideal', 'Identidade limitante', 'Oportunidade √∫nica'],
            'necessidade': ['Caminho claro', 'Mentor necess√°rio', 'M√©todo vs caos']
        }
        
        return techniques.get(phase_name, ['T√©cnica padr√£o'])
    
    def _generate_complete_script(
        self, 
        emotional_orchestration: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Gera roteiro MASSIVO de pr√©-pitch com 10+ drivers"""
        
        try:
            segmento = context_data.get('segmento', 'neg√≥cios')
            produto = context_data.get('produto', 'solu√ß√£o')
            
            # PROMPT MASSIVO PARA ROTEIRO COMPLETO
            prompt = f"""
Voc√™ √© o MESTRE SUPREMO DO PR√â-PITCH INVIS√çVEL. Crie um roteiro DEVASTADOR de pr√©-pitch que far√° o prospect IMPLORAR pela oferta.

CONTEXTO CR√çTICO:
- Segmento: {segmento}
- Produto: {produto}
- Orquestra√ß√£o: {json.dumps(emotional_orchestration, indent=2, ensure_ascii=False)[:2500]}

INSTRU√á√ïES BRUTAIS:
1. Crie um roteiro de 20-30 minutos TOTAL
2. Use M√çNIMO 8 drivers diferentes
3. Sequ√™ncia psicol√≥gica DEVASTADORA: Quebra ‚Üí Exposi√ß√£o ‚Üí Indigna√ß√£o ‚Üí Vislumbre ‚Üí Tens√£o ‚Üí Necessidade
4. Cada se√ß√£o deve ter scripts DETALHADOS de 200+ palavras
5. Frases de transi√ß√£o PERFEITAS entre se√ß√µes
6. Escalada emocional CRESCENTE at√© o cl√≠max
7. Estado mental final: DESESPERADOS pela solu√ß√£o

RETORNE APENAS JSON V√ÅLIDO:

```json
{{
  "abertura_impacto": {{
    "tempo": "4-6 minutos",
    "objetivo": "QUEBRAR padr√£o e despertar consci√™ncia brutal",
    "drivers_ativados": ["Driver 1", "Driver 2"],
    "script": "Roteiro DETALHADO de 300+ palavras espec√≠fico para {segmento}",
    "frases_chave": ["Frase brutal 1", "Frase brutal 2", "Frase brutal 3"],
    "nivel_intensidade": "Choque controlado",
    "transicao": "Frase espec√≠fica para pr√≥xima se√ß√£o"
  }},
  "exposicao_ferida": {{
    "tempo": "5-7 minutos", 
    "objetivo": "EXPOR a ferida real e amplificar dor",
    "drivers_ativados": ["Driver 3", "Driver 4"],
    "script": "Roteiro DETALHADO de 400+ palavras que exp√µe perdas invis√≠veis",
    "momentos_criticos": ["Momento 1 espec√≠fico", "Momento 2 espec√≠fico"],
    "calculo_perda": "Como quantificar dor em n√∫meros",
    "escalada_emocional": "Como aumentar press√£o gradualmente",
    "transicao": "Ponte emocional para indigna√ß√£o"
  }},
  "indignacao_revolta": {{
    "tempo": "4-5 minutos",
    "objetivo": "Criar REVOLTA produtiva e urg√™ncia visceral", 
    "drivers_ativados": ["Driver 5", "Driver 6"],
    "script": "Roteiro DETALHADO de 300+ palavras que gera indigna√ß√£o",
    "comparacoes_crueis": ["Compara√ß√£o 1", "Compara√ß√£o 2"],
    "urgencia_temporal": "Como instalar press√£o de tempo",
    "ponto_ebulicao": "Momento de m√°xima tens√£o",
    "transicao": "Al√≠vio controlado para vislumbre"
  }},
  "vislumbre_possibilidade": {{
    "tempo": "6-8 minutos",
    "objetivo": "Mostrar o POSS√çVEL e expandir ambi√ß√£o",
    "drivers_ativados": ["Driver 7", "Driver 8"],
    "script": "Roteiro DETALHADO de 400+ palavras que mostra transforma√ß√£o",
    "casos_transformacao": ["Case 1 espec√≠fico", "Case 2 espec√≠fico"],
    "visualizacao_futuro": "Como fazer eles VEREM o futuro poss√≠vel",
    "ambicao_expandida": "Como elevar teto mental",
    "transicao": "Criar gap entre atual e poss√≠vel"
  }},
  "tensao_maxima": {{
    "tempo": "3-4 minutos",
    "objetivo": "AMPLIFICAR gap entre atual e ideal",
    "drivers_ativados": ["Driver 9"],
    "script": "Roteiro DETALHADO de 250+ palavras que cria tens√£o insuport√°vel",
    "gap_devastador": "Como mostrar dist√¢ncia cruel entre realidade e potencial",
    "identidade_conflito": "Quem s√£o vs quem poderiam ser",
    "ponto_virada": "Momento exato da virada psicol√≥gica",
    "transicao": "Prepara√ß√£o para revela√ß√£o da solu√ß√£o"
  }},
  "necessidade_inevitavel": {{
    "tempo": "4-5 minutos",
    "objetivo": "Tornar mudan√ßa INEVIT√ÅVEL e urgente",
    "drivers_ativados": ["Driver 10"],
    "script": "Roteiro DETALHADO de 300+ palavras que for√ßa necessidade",
    "metodo_vs_caos": "Contraste brutal entre tentativa e sistema",
    "mentor_necessario": "Por que precisam de orienta√ß√£o externa",
    "decisao_binaria": "Elimina√ß√£o de zona cinzenta",
    "ponte_oferta": "Transi√ß√£o PERFEITA para pitch",
    "estado_mental_ideal": "ANSIOSOS, DESESPERADOS, PRONTOS"
  }},
  "metricas_devastacao": {{
    "indicadores_sucesso": ["Sil√™ncio absoluto", "Coment√°rios emocionais", "Pergunta quando abre"],
    "sinais_resistencia": ["Questionamentos t√©cnicos", "Mudan√ßa de assunto"],
    "momento_ideal_pitch": "Quando est√£o no pico de tens√£o",
    "follow_up_pos": "Como manter estado mental at√© fechamento"
  }}
}}
```

GERE O ROTEIRO DEVASTADOR AGORA!
"""
            
            response = ai_manager.generate_analysis(prompt, max_tokens=4500)
            
            if response:
                clean_response = response.strip()
                if "```json" in clean_response:
                    start = clean_response.find("```json") + 7
                    end = clean_response.rfind("```")
                    clean_response = clean_response[start:end].strip()
                
                try:
                    script = json.loads(clean_response)
                    logger.info("‚úÖ Roteiro MASSIVO gerado com IA")
                    return script
                except json.JSONDecodeError:
                    logger.warning("‚ö†Ô∏è IA retornou JSON inv√°lido para roteiro massivo")
            
            # Fallback para roteiro expandido
            return self._create_massive_script(context_data)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar roteiro massivo: {str(e)}")
            return self._create_massive_script(context_data)
    
    def _create_massive_script(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Cria roteiro MASSIVO como fallback robusto"""
        
        segmento = context_data.get('segmento', 'neg√≥cios')
        produto = context_data.get('produto', 'solu√ß√£o')
        
        return {
            'abertura_impacto': {
                'tempo': '4-6 minutos',
                'objetivo': 'QUEBRAR padr√£o e despertar consci√™ncia brutal',
                'drivers_ativados': ['Diagn√≥stico Brutal', 'Ferida Exposta'],
                'script': f"""Deixa eu te fazer uma pergunta BRUTAL sobre {segmento}... H√° quanto tempo voc√™ est√° fingindo que est√° tudo bem? Sabe quando voc√™ fala "ah, est√° indo", mas no fundo sabe que est√° estagnado? Quando voc√™ trabalha dobrado mas n√£o sai do lugar? Quando olha pros seus n√∫meros e sente aquele aperto no est√¥mago? Pois √©. Essa √© a ferida que voc√™ est√° tentando ignorar. E sabe qual √© o pior? Cada dia que voc√™ finge que est√° tudo bem, essa ferida est√° infectando. Est√° espalhando para outras √°reas da sua vida. Seu relacionamento sente. Sua autoestima sente. Seu sono sente. Porque no fundo voc√™ SABE que est√° desperdi√ßando seu potencial em {segmento}. E isso d√≥i mais que qualquer fracasso. √â a dor da mediocridade volunt√°ria.""",
                'frases_chave': [
                    f"A verdade sobre {segmento} que voc√™ est√° evitando",
                    "Fingir que est√° tudo bem √© o caminho para o colapso",
                    "Mediocridade √© uma escolha disfar√ßada de destino"
                ],
                'nivel_intensidade': 'Choque controlado',
                'transicao': "E sabe por que voc√™ chegou nesse ponto?"
            },
            'exposicao_ferida': {
                'tempo': '5-7 minutos',
                'objetivo': 'EXPOR a ferida real e amplificar dor',
                'drivers_ativados': ['Custo Invis√≠vel', 'Ambiente Vampiro'],
                'script': f"""Porque voc√™ est√° sendo VAMPIRIZADO sem perceber. Cada processo manual em {segmento} = R$ X perdidos. Cada oportunidade desperdi√ßada = R$ Y que n√£o voltam. Cada m√™s sem otimizar = R$ Z vazando pelos furos que voc√™ nem v√™. Vamos fazer as contas CRU√âIS: se voc√™ tivesse otimizado {segmento} h√° 1 ano, estaria com R$ 50 mil a mais hoje. H√° 2 anos? R$ 150 mil. H√° 3 anos? Mais de R$ 300 mil que EVAPORARAM porque voc√™ ficou "planejando" em vez de agir. Isso sem contar o custo emocional. As brigas em casa por causa do estresse. As noites mal dormidas. A autoestima corro√≠da. O ambiente t√≥xico de pessoas que te puxam para baixo dizendo "calma, n√£o √© hora", "muito arriscado", "voc√™ j√° est√° bem". Mentira. Voc√™ est√° sendo mantido pequeno por vampiros energ√©ticos que se sentem amea√ßados pelo seu potencial.""",
                'momentos_criticos': [
                    'C√°lculo brutal das perdas financeiras acumuladas',
                    'Identifica√ß√£o dos vampiros energ√©ticos no c√≠rculo social'
                ],
                'calculo_perda': 'R$ 50 mil por ano desperdi√ßados em inefici√™ncia',
                'escalada_emocional': 'Aumentar press√£o atrav√©s de n√∫meros irrefut√°veis',
                'transicao': "E sabe o que mais me deixa INDIGNADO?"
            },
            'indignacao_revolta': {
                'tempo': '4-5 minutos',
                'objetivo': 'Criar REVOLTA produtiva e urg√™ncia visceral',
                'drivers_ativados': ['Rel√≥gio Psicol√≥gico', 'Inveja Produtiva'],
                'script': f"""Enquanto voc√™ est√° "pensando", seus concorrentes est√£o AGINDO. Aquele cara que come√ßou depois de voc√™ em {segmento}? J√° est√° 3x na sua frente. Por qu√™? Porque ele parou de pensar e come√ßou a EXECUTAR. Porque ele entendeu que o tempo n√£o para para ningu√©m. Cada m√™s que voc√™ adia = cada m√™s que eles ganham vantagem. E n√£o volta mais. Nunca. Voc√™ pode recuperar dinheiro, mas tempo perdido √© para sempre. E o pior: voc√™ SABE disso. Voc√™ sabe que est√° perdendo o bonde. Voc√™ v√™ outros crescendo e sente aquela pontada de inveja disfar√ßada de "fico feliz por ele". Mentira. Voc√™ est√° morrendo de raiva porque deveria ser VOC√ä ali. E sabe por que n√£o √©? Porque voc√™ est√° viciado em "condi√ß√µes perfeitas". Esperando o momento ideal que NUNCA vai chegar.""",
                'comparacoes_crueis': [
                    'Concorrente que come√ßou depois e j√° ultrapassou',
                    'Pessoas "menos qualificadas" que est√£o na frente'
                ],
                'urgencia_temporal': 'Cada m√™s perdido = vantagem irrevers√≠vel dos concorrentes',
                'ponto_ebulicao': 'Admiss√£o da inveja produtiva dos que agem',
                'transicao': "Mas n√£o vim aqui s√≥ para abrir feridas..."
            },
            'vislumbre_possibilidade': {
                'tempo': '6-8 minutos',
                'objetivo': 'Mostrar o POSS√çVEL e expandir ambi√ß√£o',
                'drivers_ativados': ['Ambi√ß√£o Expandida', 'Trof√©u Secreto'],
                'script': f"""Porque eu j√° vi gente EXATAMENTE como voc√™ sair desse buraco e voar. Cliente meu, mesmo perfil que voc√™, mesmo n√≠vel de frustra√ß√£o em {segmento}. H√° 8 meses era invis√≠vel no mercado. Hoje? Faturamento 10x maior, reconhecido como autoridade, palestrando em eventos, sendo DISPUTADO por clientes premium. A transforma√ß√£o foi t√£o r√°pida que ele mesmo n√£o acreditou. E sabe qual foi o segredo? Ele parou de pensar pequeno. Parou de pedir migalhas e come√ßou a exigir o banquete. Se voc√™ vai fazer o mesmo esfor√ßo, por que se contentar com resultados medianos? Por que n√£o dominar completamente {segmento}? Por que n√£o ser A refer√™ncia? Por que n√£o ter clientes fazendo FILA para trabalhar com voc√™? Por que n√£o cobrar 5x mais? Por que n√£o ter um neg√≥cio que roda sem voc√™? Esse √© seu potencial REAL. N√£o para ser "mais um", mas para ser O cara.""",
                'casos_transformacao': [
                    'Cliente invis√≠vel que virou autoridade em 8 meses',
                    'Transforma√ß√£o de faturamento 10x com mesmo esfor√ßo'
                ],
                'visualizacao_futuro': 'Clientes fazendo fila, cobrando 5x mais, reconhecimento como autoridade',
                'ambicao_expandida': 'De sobrevivente para dominador total do segmento',
                'transicao': "Agora compare essa vis√£o com sua realidade atual..."
            },
            'tensao_maxima': {
                'tempo': '3-4 minutos',
                'objetivo': 'AMPLIFICAR gap entre atual e ideal',
                'drivers_ativados': ['Identidade Aprisionada'],
                'script': f"""Olha o ABISMO entre onde voc√™ est√° e onde poderia estar. De um lado: voc√™ lutando, se esfor√ßando, trabalhando dobrado para resultados medianos em {segmento}. Do outro: voc√™ dominando, clientes disputando sua aten√ß√£o, cobrando premium, sendo reconhecido. Duas vers√µes de VOC√ä. Uma frustrada, outra realizada. Uma sobrevivendo, outra prosperando. Uma trabalhando PARA o mercado, outra fazendo o mercado trabalhar para ela. E a diferen√ßa entre essas duas vers√µes n√£o √© talento. N√£o √© sorte. N√£o √© "momento certo". √â DECIS√ÉO. √â parar de se identificar como "algu√©m que luta" e come√ßar a se ver como "algu√©m que domina". Voc√™ n√£o √© um lutador. Voc√™ √© um DOMINADOR. Pare de aceitar migalhas.""",
                'gap_devastador': 'Contraste cruel entre vers√£o atual e potencial',
                'identidade_conflito': 'Lutador vs Dominador - qual identidade escolher',
                'ponto_virada': 'Reconhecimento que a diferen√ßa √© decis√£o, n√£o circunst√¢ncia',
                'transicao': "A pergunta n√£o √© SE voc√™ tem potencial..."
            },
            'necessidade_inevitavel': {
                'tempo': '4-5 minutos',
                'objetivo': 'Tornar mudan√ßa INEVIT√ÅVEL e urgente',
                'drivers_ativados': ['M√©todo vs Sorte', 'Decis√£o Bin√°ria'],
                'script': f"""A pergunta √© COMO voc√™ vai ativar esse potencial. Porque voc√™ pode continuar tentando sozinho - cortando mato com foice, reinventando a roda, aprendendo na base da tentativa e erro. Ou pode pegar a AUTOESTRADA. O m√©todo que j√° funcionou para centenas de pessoas como voc√™. O sistema que elimina 80% dos erros e acelera 300% os resultados. A diferen√ßa √© tempo. Sozinho voc√™ chega l√°? Talvez. Em 5 anos. Errando muito. Sofrendo muito. Ou voc√™ chega em 6 meses, com orienta√ß√£o, sem os furos, direto ao ponto. E agora voc√™ tem 30 segundos para decidir: vai continuar no modo "tentativa" ou vai entrar no modo "execu√ß√£o"? Porque n√£o existe meio termo. Ou voc√™ DECIDE que vai dominar {segmento} nos pr√≥ximos 6 meses, ou aceita que vai continuar na mediocridade. N√£o existe terceira op√ß√£o.""",
                'metodo_vs_caos': 'Tentativa sozinho vs Sistema comprovado',
                'mentor_necessario': 'Orienta√ß√£o elimina 80% dos erros',
                'decisao_binaria': 'Domina√ß√£o em 6 meses ou mediocridade permanente',
                'ponte_oferta': "E √© exatamente isso que eu vou te mostrar agora...",
                'estado_mental_ideal': 'TENS√ÉO M√ÅXIMA, URG√äNCIA, NECESSIDADE DE SOLU√á√ÉO IMEDIATA'
            },
            'metricas_devastacao': {
                'indicadores_sucesso': [
                    'Sil√™ncio absoluto durante ativa√ß√£o',
                    'Coment√°rios emocionais no chat: "isso sou eu"',
                    'Perguntas sobre quando abre inscri√ß√µes',
                    'Ansiedade vis√≠vel para a oferta'
                ],
                'sinais_resistencia': [
                    'Questionamentos t√©cnicos excessivos',
                    'Tentativa de mudan√ßa de assunto',
                    'Obje√ß√µes imediatas de pre√ßo/tempo'
                ],
                'momento_ideal_pitch': 'Quando perguntam como sair da situa√ß√£o',
                'follow_up_pos': 'Manter urg√™ncia atrav√©s de callbacks dos drivers ativados'
            }
        }
    
    def _create_format_variations(
        self, 
        complete_script: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Cria varia√ß√µes por formato"""
        
        return {
            'webinar': {
                'duracao_total': '15-20 minutos',
                'adaptacoes': [
                    'Usar chat para engajamento',
                    'Pausas para perguntas ret√≥ricas',
                    'Slides de apoio visual'
                ],
                'timing': '√öltimos 20 minutos antes da oferta'
            },
            'evento_presencial': {
                'duracao_total': '25-35 minutos',
                'adaptacoes': [
                    'Intera√ß√£o direta com audi√™ncia',
                    'Movimenta√ß√£o no palco',
                    'Provas visuais f√≠sicas'
                ],
                'timing': 'Distribu√≠do ao longo do evento'
            },
            'cpl_3_aulas': {
                'duracao_total': '10-15 minutos',
                'adaptacoes': [
                    'Constru√ß√£o gradual ao longo das aulas',
                    'Callbacks entre aulas',
                    'Intensifica√ß√£o na aula 3'
                ],
                'timing': 'Final da aula 3'
            },
            'lives_aquecimento': {
                'duracao_total': '5-8 minutos por live',
                'adaptacoes': [
                    'Sementes em cada live',
                    'Prepara√ß√£o subliminar',
                    'Crescimento de intensidade'
                ],
                'timing': 'Distribu√≠do nas lives'
            }
        }
    
    def _create_emotional_escalation(self, sequence: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Cria escalada emocional"""
        
        return {
            'curva_intensidade': [
                {'fase': seq['fase'], 'intensidade': seq['intensidade']} 
                for seq in sequence
            ],
            'pontos_pico': [
                seq['fase'] for seq in sequence 
                if seq['intensidade'] in ['M√°xima', 'Definitiva']
            ],
            'momentos_alivio': [
                seq['fase'] for seq in sequence 
                if seq['intensidade'] == 'Esperan√ßosa'
            ]
        }
    
    def _identify_critical_points(self, sequence: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Identifica pontos cr√≠ticos"""
        
        critical_points = []
        
        for seq in sequence:
            if seq['intensidade'] in ['M√°xima', 'Definitiva']:
                critical_points.append({
                    'fase': seq['fase'],
                    'momento': f"Durante {seq['objetivo'].lower()}",
                    'risco': 'Perda de audi√™ncia se muito intenso',
                    'oportunidade': 'M√°ximo impacto emocional',
                    'gestao': 'Monitorar rea√ß√µes e ajustar intensidade'
                })
        
        return critical_points
    
    def _create_phase_transitions(self, sequence: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Cria transi√ß√µes entre fases"""
        
        transitions = []
        
        for i in range(len(sequence) - 1):
            current_phase = sequence[i]['fase']
            next_phase = sequence[i + 1]['fase']
            
            transition_key = f"{current_phase}_para_{next_phase}"
            transition_text = self.transition_templates.get(
                transition_key, 
                f"Transi√ß√£o de {current_phase} para {next_phase}"
            )
            
            transitions.append({
                'de': current_phase,
                'para': next_phase,
                'script': transition_text,
                'tempo': '15-30 segundos',
                'tecnica': 'Ponte emocional suave'
            })
        
        return transitions
    
    def _create_success_metrics(self) -> Dict[str, Any]:
        """Cria m√©tricas de sucesso"""
        
        return {
            'indicadores_durante': [
                'Sil√™ncio absoluto durante ativa√ß√£o',
                'Coment√°rios emocionais no chat',
                'Perguntas sobre quando abre inscri√ß√µes',
                'Concord√¢ncia f√≠sica (acenar cabe√ßa)'
            ],
            'indicadores_apos': [
                'Ansiedade vis√≠vel para a oferta',
                'Perguntas sobre pre√ßo/formato',
                'Coment√°rios "j√° quero comprar"',
                'Obje√ß√µes minimizadas'
            ],
            'sinais_resistencia': [
                'Questionamentos t√©cnicos excessivos',
                'Mudan√ßa de assunto',
                'Obje√ß√µes imediatas',
                'Linguagem corporal fechada'
            ],
            'metricas_conversao': {
                'engajamento': 'Tempo de aten√ß√£o por fase',
                'emocional': 'Rea√ß√µes emocionais geradas',
                'comportamental': 'A√ß√µes tomadas ap√≥s ativa√ß√£o',
                'conversao': 'Taxa de convers√£o p√≥s-pr√©-pitch'
            }
        }
    
    def _calculate_total_duration(self, orchestration: Dict[str, Any]) -> str:
        """Calcula dura√ß√£o total"""
        
        sequence = orchestration.get('sequencia_psicologica', [])
        
        total_min = 0
        total_max = 0
        
        for phase in sequence:
            duration = phase.get('duracao', '3-4 minutos')
            
            # Extrai n√∫meros da dura√ß√£o
            import re
            numbers = re.findall(r'\d+', duration)
            if len(numbers) >= 2:
                total_min += int(numbers[0])
                total_max += int(numbers[1])
            elif len(numbers) == 1:
                total_min += int(numbers[0])
                total_max += int(numbers[0])
        
        return f"{total_min}-{total_max} minutos"
    
    def _calculate_max_intensity(self, orchestration: Dict[str, Any]) -> str:
        """Calcula intensidade m√°xima"""
        
        sequence = orchestration.get('sequencia_psicologica', [])
        
        intensities = [phase.get('intensidade', 'Baixa') for phase in sequence]
        
        if 'M√°xima' in intensities:
            return 'M√°xima'
        elif 'Alta' in intensities:
            return 'Alta'
        elif 'Crescente' in intensities:
            return 'Crescente'
        else:
            return 'M√©dia'
    
    def _generate_fallback_pre_pitch_system(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera sistema de pr√©-pitch b√°sico como fallback"""
        
        segmento = context_data.get('segmento', 'neg√≥cios')
        
        return {
            'orquestracao_emocional': {
                'sequencia_psicologica': [
                    {
                        'fase': 'quebra',
                        'objetivo': 'Quebrar padr√£o e despertar consci√™ncia',
                        'duracao': '3-5 minutos',
                        'intensidade': 'Alta',
                        'drivers_utilizados': ['Diagn√≥stico Brutal'],
                        'resultado_esperado': 'Desconforto produtivo'
                    },
                    {
                        'fase': 'vislumbre',
                        'objetivo': 'Mostrar possibilidades',
                        'duracao': '5-7 minutos',
                        'intensidade': 'Esperan√ßosa',
                        'drivers_utilizados': ['M√©todo vs Sorte'],
                        'resultado_esperado': 'Desejo de mudan√ßa'
                    },
                    {
                        'fase': 'necessidade',
                        'objetivo': 'Criar necessidade de solu√ß√£o',
                        'duracao': '3-4 minutos',
                        'intensidade': 'Definitiva',
                        'drivers_utilizados': ['Rel√≥gio Psicol√≥gico'],
                        'resultado_esperado': 'Urg√™ncia de a√ß√£o'
                    }
                ]
            },
            'roteiro_completo': {
                'abertura': {
                    'tempo': '3-5 minutos',
                    'objetivo': 'Quebrar padr√£o e despertar consci√™ncia',
                    'script': f"Deixa eu te fazer uma pergunta sobre {segmento}... H√° quanto tempo voc√™ est√° no mesmo n√≠vel? A verdade √© que a maioria dos profissionais trabalha muito mas n√£o sai do lugar.",
                    'frases_chave': [
                        f"A verdade sobre {segmento} que ningu√©m te conta",
                        "Isso vai doer, mas precisa ser dito"
                    ],
                    'transicao': "E sabe por que isso acontece?"
                },
                'desenvolvimento': {
                    'tempo': '8-12 minutos',
                    'objetivo': 'Amplificar dor e mostrar possibilidades',
                    'script': f"Cada dia que passa sem otimizar {segmento} √© dinheiro saindo do seu bolso. Enquanto voc√™ est√° 'pensando', seus concorrentes est√£o agindo. Mas existe um caminho diferente...",
                    'momentos_criticos': [
                        "C√°lculo da perda financeira por ina√ß√£o",
                        "Compara√ß√£o com concorrentes que agem"
                    ],
                    'escalada_emocional': "Aumentar press√£o gradualmente, depois mostrar esperan√ßa"
                },
                'fechamento': {
                    'tempo': '2-3 minutos',
                    'objetivo': 'Transi√ß√£o para solu√ß√£o',
                    'script': f"Agora voc√™ tem duas escolhas em {segmento}: continuar como est√° ou seguir um m√©todo comprovado. Eu vou te mostrar exatamente como sair dessa situa√ß√£o...",
                    'ponte_oferta': "Mas antes, preciso saber se voc√™ est√° realmente pronto para mudar...",
                    'estado_mental_ideal': "Ansioso pela solu√ß√£o, pronto para agir"
                }
            },
            'validation_status': 'FALLBACK_VALID',
            'generation_timestamp': time.time(),
            'fallback_mode': True,
            'duracao_total': '13-20 minutos'
        }

# Inst√¢ncia global
pre_pitch_architect = PrePitchArchitect()